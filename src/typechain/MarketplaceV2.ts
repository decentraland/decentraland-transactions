/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MarketplaceV2Interface extends utils.Interface {
  functions: {
    "ERC721_Interface()": FunctionFragment;
    "InterfaceId_ValidateFingerprint()": FunctionFragment;
    "acceptedToken()": FunctionFragment;
    "cancelOrder(address,uint256)": FunctionFragment;
    "createOrder(address,uint256,uint256,uint256)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "executeOrder(address,uint256,uint256)": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "feesCollectorCutPerMillion()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "orderByAssetId(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "publicationFeeInWei()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltiesCutPerMillion()": FunctionFragment;
    "royaltiesManager()": FunctionFragment;
    "safeExecuteOrder(address,uint256,uint256,bytes)": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setFeesCollectorCutPerMillion(uint256)": FunctionFragment;
    "setPublicationFee(uint256)": FunctionFragment;
    "setRoyaltiesCutPerMillion(uint256)": FunctionFragment;
    "setRoyaltiesManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC721_Interface"
      | "InterfaceId_ValidateFingerprint"
      | "acceptedToken"
      | "cancelOrder"
      | "createOrder"
      | "domainSeparator"
      | "executeMetaTransaction"
      | "executeOrder"
      | "feesCollector"
      | "feesCollectorCutPerMillion"
      | "getChainId"
      | "getNonce"
      | "orderByAssetId"
      | "owner"
      | "paused"
      | "publicationFeeInWei"
      | "renounceOwnership"
      | "royaltiesCutPerMillion"
      | "royaltiesManager"
      | "safeExecuteOrder"
      | "setFeesCollector"
      | "setFeesCollectorCutPerMillion"
      | "setPublicationFee"
      | "setRoyaltiesCutPerMillion"
      | "setRoyaltiesManager"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC721_Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "InterfaceId_ValidateFingerprint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollectorCutPerMillion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderByAssetId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicationFeeInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesCutPerMillion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeExecuteOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollectorCutPerMillion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesCutPerMillion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC721_Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "InterfaceId_ValidateFingerprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollectorCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderByAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicationFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollectorCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChangedFeesCollectorCutPerMillion(uint256)": EventFragment;
    "ChangedPublicationFee(uint256)": EventFragment;
    "ChangedRoyaltiesCutPerMillion(uint256)": EventFragment;
    "FeesCollectorSet(address,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OrderCancelled(bytes32,uint256,address,address)": EventFragment;
    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)": EventFragment;
    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoyaltiesManagerSet(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ChangedFeesCollectorCutPerMillion"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPublicationFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangedRoyaltiesCutPerMillion"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ChangedFeesCollectorCutPerMillionEventObject {
  feesCollectorCutPerMillion: BigNumber;
}
export type ChangedFeesCollectorCutPerMillionEvent = TypedEvent<
  [BigNumber],
  ChangedFeesCollectorCutPerMillionEventObject
>;

export type ChangedFeesCollectorCutPerMillionEventFilter =
  TypedEventFilter<ChangedFeesCollectorCutPerMillionEvent>;

export interface ChangedPublicationFeeEventObject {
  publicationFee: BigNumber;
}
export type ChangedPublicationFeeEvent = TypedEvent<
  [BigNumber],
  ChangedPublicationFeeEventObject
>;

export type ChangedPublicationFeeEventFilter =
  TypedEventFilter<ChangedPublicationFeeEvent>;

export interface ChangedRoyaltiesCutPerMillionEventObject {
  royaltiesCutPerMillion: BigNumber;
}
export type ChangedRoyaltiesCutPerMillionEvent = TypedEvent<
  [BigNumber],
  ChangedRoyaltiesCutPerMillionEventObject
>;

export type ChangedRoyaltiesCutPerMillionEventFilter =
  TypedEventFilter<ChangedRoyaltiesCutPerMillionEvent>;

export interface FeesCollectorSetEventObject {
  oldFeesCollector: string;
  newFeesCollector: string;
}
export type FeesCollectorSetEvent = TypedEvent<
  [string, string],
  FeesCollectorSetEventObject
>;

export type FeesCollectorSetEventFilter =
  TypedEventFilter<FeesCollectorSetEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OrderCancelledEventObject {
  id: string;
  assetId: BigNumber;
  seller: string;
  nftAddress: string;
}
export type OrderCancelledEvent = TypedEvent<
  [string, BigNumber, string, string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCreatedEventObject {
  id: string;
  assetId: BigNumber;
  seller: string;
  nftAddress: string;
  priceInWei: BigNumber;
  expiresAt: BigNumber;
}
export type OrderCreatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderSuccessfulEventObject {
  id: string;
  assetId: BigNumber;
  seller: string;
  nftAddress: string;
  totalPrice: BigNumber;
  buyer: string;
}
export type OrderSuccessfulEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  OrderSuccessfulEventObject
>;

export type OrderSuccessfulEventFilter = TypedEventFilter<OrderSuccessfulEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoyaltiesManagerSetEventObject {
  oldRoyaltiesManager: string;
  newRoyaltiesManager: string;
}
export type RoyaltiesManagerSetEvent = TypedEvent<
  [string, string],
  RoyaltiesManagerSetEventObject
>;

export type RoyaltiesManagerSetEventFilter =
  TypedEventFilter<RoyaltiesManagerSetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MarketplaceV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC721_Interface(overrides?: CallOverrides): Promise<[string]>;

    InterfaceId_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<[string]>;

    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltiesCutPerMillion(overrides?: CallOverrides): Promise<[BigNumber]>;

    royaltiesManager(overrides?: CallOverrides): Promise<[string]>;

    safeExecuteOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicationFee(
      _publicationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesManager(
      _newRoyaltiesManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ERC721_Interface(overrides?: CallOverrides): Promise<string>;

  InterfaceId_ValidateFingerprint(overrides?: CallOverrides): Promise<string>;

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  cancelOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    priceInWei: PromiseOrValue<BigNumberish>,
    expiresAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: PromiseOrValue<string>,
    functionSignature: PromiseOrValue<BytesLike>,
    sigR: PromiseOrValue<BytesLike>,
    sigS: PromiseOrValue<BytesLike>,
    sigV: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderByAssetId(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      id: string;
      seller: string;
      nftAddress: string;
      price: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltiesCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

  royaltiesManager(overrides?: CallOverrides): Promise<string>;

  safeExecuteOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    fingerprint: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    _newFeesCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesCollectorCutPerMillion(
    _feesCollectorCutPerMillion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicationFee(
    _publicationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesCutPerMillion(
    _royaltiesCutPerMillion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesManager(
    _newRoyaltiesManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC721_Interface(overrides?: CallOverrides): Promise<string>;

    InterfaceId_ValidateFingerprint(overrides?: CallOverrides): Promise<string>;

    acceptedToken(overrides?: CallOverrides): Promise<string>;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltiesCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    royaltiesManager(overrides?: CallOverrides): Promise<string>;

    safeExecuteOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      fingerprint: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicationFee(
      _publicationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesManager(
      _newRoyaltiesManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangedFeesCollectorCutPerMillion(uint256)"(
      feesCollectorCutPerMillion?: null
    ): ChangedFeesCollectorCutPerMillionEventFilter;
    ChangedFeesCollectorCutPerMillion(
      feesCollectorCutPerMillion?: null
    ): ChangedFeesCollectorCutPerMillionEventFilter;

    "ChangedPublicationFee(uint256)"(
      publicationFee?: null
    ): ChangedPublicationFeeEventFilter;
    ChangedPublicationFee(
      publicationFee?: null
    ): ChangedPublicationFeeEventFilter;

    "ChangedRoyaltiesCutPerMillion(uint256)"(
      royaltiesCutPerMillion?: null
    ): ChangedRoyaltiesCutPerMillionEventFilter;
    ChangedRoyaltiesCutPerMillion(
      royaltiesCutPerMillion?: null
    ): ChangedRoyaltiesCutPerMillionEventFilter;

    "FeesCollectorSet(address,address)"(
      oldFeesCollector?: PromiseOrValue<string> | null,
      newFeesCollector?: PromiseOrValue<string> | null
    ): FeesCollectorSetEventFilter;
    FeesCollectorSet(
      oldFeesCollector?: PromiseOrValue<string> | null,
      newFeesCollector?: PromiseOrValue<string> | null
    ): FeesCollectorSetEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OrderCancelled(bytes32,uint256,address,address)"(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null
    ): OrderCancelledEventFilter;

    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)"(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null
    ): OrderCreatedEventFilter;

    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)"(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: PromiseOrValue<string> | null
    ): OrderSuccessfulEventFilter;
    OrderSuccessful(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: PromiseOrValue<string> | null
    ): OrderSuccessfulEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoyaltiesManagerSet(address,address)"(
      oldRoyaltiesManager?: PromiseOrValue<string> | null,
      newRoyaltiesManager?: PromiseOrValue<string> | null
    ): RoyaltiesManagerSetEventFilter;
    RoyaltiesManagerSet(
      oldRoyaltiesManager?: PromiseOrValue<string> | null,
      newRoyaltiesManager?: PromiseOrValue<string> | null
    ): RoyaltiesManagerSetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ERC721_Interface(overrides?: CallOverrides): Promise<BigNumber>;

    InterfaceId_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltiesCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    royaltiesManager(overrides?: CallOverrides): Promise<BigNumber>;

    safeExecuteOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicationFee(
      _publicationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltiesManager(
      _newRoyaltiesManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721_Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    InterfaceId_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesCollectorCutPerMillion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicationFeeInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltiesCutPerMillion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltiesManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeExecuteOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicationFee(
      _publicationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesManager(
      _newRoyaltiesManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
