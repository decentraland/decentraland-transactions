/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IERC721CollectionV2 {
  export type ItemParamStruct = {
    rarity: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
  };

  export type ItemParamStructOutput = [string, BigNumber, string, string] & {
    rarity: string;
    price: BigNumber;
    beneficiary: string;
    metadata: string;
  };
}

export interface CollectionManagerInterface extends utils.Interface {
  functions: {
    "acceptedToken()": FunctionFragment;
    "allowedCommitteeMethods(bytes4)": FunctionFragment;
    "committee()": FunctionFragment;
    "createCollection(address,address,bytes32,string,string,string,address,(string,uint256,address,string)[])": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "manageCollection(address,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pricePerItem()": FunctionFragment;
    "rarities()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAcceptedToken(address)": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
    "setCommitteeMethods(bytes4[],bool[])": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setRarities(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptedToken"
      | "allowedCommitteeMethods"
      | "committee"
      | "createCollection"
      | "domainSeparator"
      | "executeMetaTransaction"
      | "feesCollector"
      | "getChainId"
      | "getNonce"
      | "manageCollection"
      | "owner"
      | "pricePerItem"
      | "rarities"
      | "renounceOwnership"
      | "setAcceptedToken"
      | "setCommittee"
      | "setCommitteeMethods"
      | "setFeesCollector"
      | "setRarities"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedCommitteeMethods",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IERC721CollectionV2.ItemParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manageCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerItem",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rarities", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommitteeMethods",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRarities",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedCommitteeMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rarities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommitteeMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRarities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedTokenSet(address,address)": EventFragment;
    "CommitteeMethodSet(bytes4,bool)": EventFragment;
    "CommitteeSet(address,address)": EventFragment;
    "FeesCollectorSet(address,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RaritiesSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeMethodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaritiesSet"): EventFragment;
}

export interface AcceptedTokenSetEventObject {
  _oldAcceptedToken: string;
  _newAcceptedToken: string;
}
export type AcceptedTokenSetEvent = TypedEvent<
  [string, string],
  AcceptedTokenSetEventObject
>;

export type AcceptedTokenSetEventFilter =
  TypedEventFilter<AcceptedTokenSetEvent>;

export interface CommitteeMethodSetEventObject {
  _method: string;
  _isAllowed: boolean;
}
export type CommitteeMethodSetEvent = TypedEvent<
  [string, boolean],
  CommitteeMethodSetEventObject
>;

export type CommitteeMethodSetEventFilter =
  TypedEventFilter<CommitteeMethodSetEvent>;

export interface CommitteeSetEventObject {
  _oldCommittee: string;
  _newCommittee: string;
}
export type CommitteeSetEvent = TypedEvent<
  [string, string],
  CommitteeSetEventObject
>;

export type CommitteeSetEventFilter = TypedEventFilter<CommitteeSetEvent>;

export interface FeesCollectorSetEventObject {
  _oldFeesCollector: string;
  _newFeesCollector: string;
}
export type FeesCollectorSetEvent = TypedEvent<
  [string, string],
  FeesCollectorSetEventObject
>;

export type FeesCollectorSetEventFilter =
  TypedEventFilter<FeesCollectorSetEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RaritiesSetEventObject {
  _oldRarities: string;
  _newRarities: string;
}
export type RaritiesSetEvent = TypedEvent<
  [string, string],
  RaritiesSetEventObject
>;

export type RaritiesSetEventFilter = TypedEventFilter<RaritiesSetEvent>;

export interface CollectionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    allowedCommitteeMethods(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    committee(overrides?: CallOverrides): Promise<[string]>;

    createCollection(
      _forwarder: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _items: IERC721CollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    manageCollection(
      _forwarder: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pricePerItem(overrides?: CallOverrides): Promise<[BigNumber]>;

    rarities(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommitteeMethods(
      _methods: PromiseOrValue<BytesLike>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRarities(
      _newRarities: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  allowedCommitteeMethods(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  committee(overrides?: CallOverrides): Promise<string>;

  createCollection(
    _forwarder: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _items: IERC721CollectionV2.ItemParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: PromiseOrValue<string>,
    functionSignature: PromiseOrValue<BytesLike>,
    sigR: PromiseOrValue<BytesLike>,
    sigS: PromiseOrValue<BytesLike>,
    sigV: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  manageCollection(
    _forwarder: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pricePerItem(overrides?: CallOverrides): Promise<BigNumber>;

  rarities(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAcceptedToken(
    _newAcceptedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommittee(
    _newCommittee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommitteeMethods(
    _methods: PromiseOrValue<BytesLike>[],
    _values: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    _newFeesCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRarities(
    _newRarities: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptedToken(overrides?: CallOverrides): Promise<string>;

    allowedCommitteeMethods(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    committee(overrides?: CallOverrides): Promise<string>;

    createCollection(
      _forwarder: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _items: IERC721CollectionV2.ItemParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manageCollection(
      _forwarder: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pricePerItem(overrides?: CallOverrides): Promise<BigNumber>;

    rarities(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommitteeMethods(
      _methods: PromiseOrValue<BytesLike>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRarities(
      _newRarities: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedTokenSet(address,address)"(
      _oldAcceptedToken?: PromiseOrValue<string> | null,
      _newAcceptedToken?: PromiseOrValue<string> | null
    ): AcceptedTokenSetEventFilter;
    AcceptedTokenSet(
      _oldAcceptedToken?: PromiseOrValue<string> | null,
      _newAcceptedToken?: PromiseOrValue<string> | null
    ): AcceptedTokenSetEventFilter;

    "CommitteeMethodSet(bytes4,bool)"(
      _method?: PromiseOrValue<BytesLike> | null,
      _isAllowed?: null
    ): CommitteeMethodSetEventFilter;
    CommitteeMethodSet(
      _method?: PromiseOrValue<BytesLike> | null,
      _isAllowed?: null
    ): CommitteeMethodSetEventFilter;

    "CommitteeSet(address,address)"(
      _oldCommittee?: PromiseOrValue<string> | null,
      _newCommittee?: PromiseOrValue<string> | null
    ): CommitteeSetEventFilter;
    CommitteeSet(
      _oldCommittee?: PromiseOrValue<string> | null,
      _newCommittee?: PromiseOrValue<string> | null
    ): CommitteeSetEventFilter;

    "FeesCollectorSet(address,address)"(
      _oldFeesCollector?: PromiseOrValue<string> | null,
      _newFeesCollector?: PromiseOrValue<string> | null
    ): FeesCollectorSetEventFilter;
    FeesCollectorSet(
      _oldFeesCollector?: PromiseOrValue<string> | null,
      _newFeesCollector?: PromiseOrValue<string> | null
    ): FeesCollectorSetEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RaritiesSet(address,address)"(
      _oldRarities?: PromiseOrValue<string> | null,
      _newRarities?: PromiseOrValue<string> | null
    ): RaritiesSetEventFilter;
    RaritiesSet(
      _oldRarities?: PromiseOrValue<string> | null,
      _newRarities?: PromiseOrValue<string> | null
    ): RaritiesSetEventFilter;
  };

  estimateGas: {
    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    allowedCommitteeMethods(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<BigNumber>;

    createCollection(
      _forwarder: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _items: IERC721CollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manageCollection(
      _forwarder: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerItem(overrides?: CallOverrides): Promise<BigNumber>;

    rarities(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommitteeMethods(
      _methods: PromiseOrValue<BytesLike>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRarities(
      _newRarities: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedCommitteeMethods(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCollection(
      _forwarder: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _items: IERC721CollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manageCollection(
      _forwarder: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerItem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rarities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommitteeMethods(
      _methods: PromiseOrValue<BytesLike>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRarities(
      _newRarities: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
